from fpdf import FPDF
from datetime import datetime
import os
import qrcode
from PIL import Image


class WitchyReport(FPDF):
    def header(self):
        bg_path = os.path.join(os.path.dirname(__file__), "download.jpeg")
        self.image(bg_path, x=0, y=0, w=210, h=297)  # A4 size in mm

        # CLASSIFIED label
        self.set_font("DejaVu", "B", 12)
        self.set_text_color(255, 0, 0)
        self.cell(0, 10, "CLASSIFIED: LEVEL 2", ln=True, align="C")

        # Watermark
        self.set_text_color(180, 180, 180)
        self.set_font("DejaVu", "B", 50)
        self.text(30, 60, "BLACK MIRROR")

        # Title
        self.set_text_color(255, 0, 0)
        self.set_font("DejaVu", "B", 16)
        self.cell(0, 10, "üï∑ BlackMirror OSINT Dossier üï∑", ln=True, align="C")
        self.set_draw_color(255, 0, 0)
        self.set_line_width(0.6)
        self.line(10, 20, 200, 20)
        self.ln(8)

    def footer(self):
        self.set_y(-15)
        self.set_font("DejaVu", "I", 8)
        self.set_text_color(100, 100, 100)
        self.cell(0, 10, "Generated by BlackMirror v2 // internal use only", 0, 0, "C")

    def section_title(self, title):
        self.set_font("DejaVu", "B", 14)
        self.set_text_color(139, 0, 0)  # Red section headers
        self.cell(0, 10, f"‚ú¶ {title} ‚ú¶", ln=True)
        self.set_text_color(0, 0, 0)  # Reset to black for content

    def body_text(self, text):
        self.set_font("DejaVu", size=12)
        self.set_text_color(0, 0, 0)
        self.multi_cell(0, 10, text)

    def bullet_list(self, items):
        self.set_font("DejaVu", size=12)
        self.set_text_color(0, 0, 0)
        for item in items:
            self.cell(0, 10, f"üëÅ {item}", ln=True)

    def creepy_line(self):
        self.set_draw_color(139, 0, 0)
        self.line(10, self.get_y(), 200, self.get_y())
        self.ln(5)

def register_fonts(pdf):
    font_dir = os.path.dirname(__file__)
    pdf.add_font("DejaVu", "", os.path.join(font_dir, "DejaVuSans.ttf"), uni=True)
    pdf.add_font("DejaVu", "B", os.path.join(font_dir, "DejaVuSans-Bold.ttf"), uni=True)
    pdf.add_font("DejaVu", "I", os.path.join(font_dir, "DejaVuSans-Oblique.ttf"), uni=True)
    pdf.add_font("DejaVu", "BI", os.path.join(font_dir, "DejaVuSans-BoldOblique.ttf"), uni=True)

def save_report(email, dork_links, social_profiles, persona, leaks, phishing_mail):
    pdf = WitchyReport()
    register_fonts(pdf)
    pdf.add_page()

    # Metadata
    pdf.set_font("DejaVu", size=12)
    pdf.set_text_color(0, 0, 0)
    pdf.cell(0, 10, f"ü©∏ Marked Email: {email}", ln=True)
    pdf.cell(0, 10, f"ü™Ñ Manifested: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=True)
    pdf.creepy_line()

    # Google Dorks
    pdf.section_title("Unearthed Relics (Google Dorks)")
    if dork_links:
        for i, link in enumerate(dork_links, 1):
            pdf.set_text_color(139, 0, 0)  # blood red links
            pdf.set_font("DejaVu", size=11)
            pdf.cell(0, 10, f"üîÆ [{i}] {link}", ln=True, link=link)
    else:
        pdf.body_text("No cursed footprints found in the indexed abyss.")
    pdf.creepy_line()

    # Social Media
    pdf.section_title("Social Shadows")
    if social_profiles:
        pdf.set_font("DejaVu", size=12)
        for platform, link in social_profiles:
            pdf.set_text_color(139, 0, 0)  # red link
            pdf.cell(0, 10, f"‚ò† {platform}: {link}", ln=True, link=link)
    else:
        pdf.body_text("The shadow leaves no trace... for now.")
    pdf.creepy_line()

    # Persona
    pdf.section_title("Shadowcrafted Persona")
    persona_info = [
        f"Name: {persona['name']}",
        f"Location: {persona['location']}",
        f"Job Title: {persona['job_title']}",
        f"Company: {persona['company']}",
        f"Interests: {', '.join(persona['interests'])}"
    ]
    pdf.bullet_list(persona_info)
    pdf.creepy_line()

    # Leaks
    pdf.section_title("Digital Bleeds (Leaks)")
    if leaks:
        for link, snippet in leaks:
            pdf.set_text_color(139, 0, 0)  # link color
            pdf.cell(0, 10, f"üîó {link}", ln=True, link=link)
            pdf.set_text_color(0, 0, 0)
            pdf.set_font("DejaVu", size=10)
            pdf.multi_cell(0, 8, f"ü©∏ Blood trail snippet: {snippet[:200]}...")
            pdf.set_font("DejaVu", size=12)
    else:
        pdf.body_text("No blood trail detected... yet.")
    pdf.creepy_line()

    # Phishing Spell
    pdf.section_title("Phishing Incantation")
    pdf.set_font("DejaVu", size=11)
    pdf.set_text_color(0, 0, 0)
    pdf.multi_cell(0, 8, phishing_mail)
    pdf.ln(2)

    # Add dummy clickable link below the phishing message
    reset_url = "https://urgent-reset.com"
    pdf.set_text_color(139, 0, 0)  # red for link
    pdf.cell(0, 10, f"üîó Reset Link: {reset_url}", ln=True, link=reset_url)
    pdf.set_text_color(0, 0, 0)  # reset to black

    # QR Code Generation
    qr = qrcode.make("https://urgent-reset.com")
    qr_path = os.path.join(os.path.dirname(__file__), "blackmirror_qr.png")
    qr.save(qr_path)
    pdf.image(qr_path, x=80, y=pdf.get_y() + 5, w=50)

    # Footer
    pdf.set_y(-20)
    pdf.set_font("DejaVu", "I", 8)
    pdf.set_text_color(0, 0, 0)
    pdf.cell(0, 10, "[BlackMirror.exe] // Unauthorized observance initiated...", ln=True, align="C")

    pdf.output("BlackMirror_Witchy_Report.pdf")
